// @generated by protobuf-ts 2.9.3
// @generated from protobuf file "card_info.proto" (syntax proto3)
// tslint:disable
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
/**
 * @generated from protobuf message CardInfo
 */
export interface CardInfo {
    /**
     * @generated from protobuf field: repeated CardInfo.CardInfoType card_info_types = 1;
     */
    cardInfoTypes: CardInfo_CardInfoType[];
    /**
     * @generated from protobuf field: CardInfo.TraitOptions trait_options = 2;
     */
    traitOptions?: CardInfo_TraitOptions;
    /**
     * @generated from protobuf field: CardInfo.CommitOptions commit_options = 3;
     */
    commitOptions?: CardInfo_CommitOptions;
}
/**
 * @generated from protobuf message CardInfo.TraitOptions
 */
export interface CardInfo_TraitOptions {
    /**
     * @generated from protobuf field: string highlight = 1;
     */
    highlight: string;
}
/**
 * @generated from protobuf message CardInfo.CommitOptions
 */
export interface CardInfo_CommitOptions {
    /**
     * @generated from protobuf field: CardInfo.CommitOptions.CommitIcon highlight = 1;
     */
    highlight: CardInfo_CommitOptions_CommitIcon;
}
/**
 * @generated from protobuf enum CardInfo.CommitOptions.CommitIcon
 */
export enum CardInfo_CommitOptions_CommitIcon {
    /**
     * @generated from protobuf enum value: Unknown = 0;
     */
    Unknown = 0,
    /**
     * @generated from protobuf enum value: Willpower = 1;
     */
    Willpower = 1,
    /**
     * @generated from protobuf enum value: Intellect = 2;
     */
    Intellect = 2,
    /**
     * @generated from protobuf enum value: Combat = 3;
     */
    Combat = 3,
    /**
     * @generated from protobuf enum value: Agility = 4;
     */
    Agility = 4,
    /**
     * @generated from protobuf enum value: Wild = 5;
     */
    Wild = 5
}
/**
 * @generated from protobuf enum CardInfo.CardInfoType
 */
export enum CardInfo_CardInfoType {
    /**
     * @generated from protobuf enum value: Unknown = 0;
     */
    Unknown = 0,
    /**
     * @generated from protobuf enum value: PlayCost = 1;
     */
    PlayCost = 1,
    /**
     * @generated from protobuf enum value: CommitIcon = 2;
     */
    CommitIcon = 2,
    /**
     * @generated from protobuf enum value: Traits = 3;
     */
    Traits = 3
}
// @generated message type with reflection information, may provide speed optimized methods
class CardInfo$Type extends MessageType<CardInfo> {
    constructor() {
        super("CardInfo", [
            { no: 1, name: "card_info_types", kind: "enum", repeat: 1 /*RepeatType.PACKED*/, T: () => ["CardInfo.CardInfoType", CardInfo_CardInfoType] },
            { no: 2, name: "trait_options", kind: "message", T: () => CardInfo_TraitOptions },
            { no: 3, name: "commit_options", kind: "message", T: () => CardInfo_CommitOptions }
        ]);
    }
    create(value?: PartialMessage<CardInfo>): CardInfo {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.cardInfoTypes = [];
        if (value !== undefined)
            reflectionMergePartial<CardInfo>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: CardInfo): CardInfo {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated CardInfo.CardInfoType card_info_types */ 1:
                    if (wireType === WireType.LengthDelimited)
                        for (let e = reader.int32() + reader.pos; reader.pos < e;)
                            message.cardInfoTypes.push(reader.int32());
                    else
                        message.cardInfoTypes.push(reader.int32());
                    break;
                case /* CardInfo.TraitOptions trait_options */ 2:
                    message.traitOptions = CardInfo_TraitOptions.internalBinaryRead(reader, reader.uint32(), options, message.traitOptions);
                    break;
                case /* CardInfo.CommitOptions commit_options */ 3:
                    message.commitOptions = CardInfo_CommitOptions.internalBinaryRead(reader, reader.uint32(), options, message.commitOptions);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: CardInfo, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated CardInfo.CardInfoType card_info_types = 1; */
        if (message.cardInfoTypes.length) {
            writer.tag(1, WireType.LengthDelimited).fork();
            for (let i = 0; i < message.cardInfoTypes.length; i++)
                writer.int32(message.cardInfoTypes[i]);
            writer.join();
        }
        /* CardInfo.TraitOptions trait_options = 2; */
        if (message.traitOptions)
            CardInfo_TraitOptions.internalBinaryWrite(message.traitOptions, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        /* CardInfo.CommitOptions commit_options = 3; */
        if (message.commitOptions)
            CardInfo_CommitOptions.internalBinaryWrite(message.commitOptions, writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message CardInfo
 */
export const CardInfo = new CardInfo$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CardInfo_TraitOptions$Type extends MessageType<CardInfo_TraitOptions> {
    constructor() {
        super("CardInfo.TraitOptions", [
            { no: 1, name: "highlight", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<CardInfo_TraitOptions>): CardInfo_TraitOptions {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.highlight = "";
        if (value !== undefined)
            reflectionMergePartial<CardInfo_TraitOptions>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: CardInfo_TraitOptions): CardInfo_TraitOptions {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string highlight */ 1:
                    message.highlight = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: CardInfo_TraitOptions, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string highlight = 1; */
        if (message.highlight !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.highlight);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message CardInfo.TraitOptions
 */
export const CardInfo_TraitOptions = new CardInfo_TraitOptions$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CardInfo_CommitOptions$Type extends MessageType<CardInfo_CommitOptions> {
    constructor() {
        super("CardInfo.CommitOptions", [
            { no: 1, name: "highlight", kind: "enum", T: () => ["CardInfo.CommitOptions.CommitIcon", CardInfo_CommitOptions_CommitIcon] }
        ]);
    }
    create(value?: PartialMessage<CardInfo_CommitOptions>): CardInfo_CommitOptions {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.highlight = 0;
        if (value !== undefined)
            reflectionMergePartial<CardInfo_CommitOptions>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: CardInfo_CommitOptions): CardInfo_CommitOptions {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* CardInfo.CommitOptions.CommitIcon highlight */ 1:
                    message.highlight = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: CardInfo_CommitOptions, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* CardInfo.CommitOptions.CommitIcon highlight = 1; */
        if (message.highlight !== 0)
            writer.tag(1, WireType.Varint).int32(message.highlight);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message CardInfo.CommitOptions
 */
export const CardInfo_CommitOptions = new CardInfo_CommitOptions$Type();
