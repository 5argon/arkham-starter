// @generated by protobuf-ts 2.8.1
// @generated from protobuf file "campaign_switch.proto" (syntax proto3)
// tslint:disable
import type { BinaryWriteOptions } from '@protobuf-ts/runtime'
import type { IBinaryWriter } from '@protobuf-ts/runtime'
import type { BinaryReadOptions } from '@protobuf-ts/runtime'
import type { IBinaryReader } from '@protobuf-ts/runtime'
import type { PartialMessage } from '@protobuf-ts/runtime'
import { WireType } from '@protobuf-ts/runtime'
import { UnknownFieldHandler } from '@protobuf-ts/runtime'
import { reflectionMergePartial } from '@protobuf-ts/runtime'
import { MESSAGE_TYPE } from '@protobuf-ts/runtime'
import { MessageType } from '@protobuf-ts/runtime'
/**
 * @generated from protobuf message CampaignSwitchProto
 */
export interface CampaignSwitchProto {
	/**
	 * @generated from protobuf field: repeated CampaignSwitchProto.Campaign campaigns = 1;
	 */
	campaigns: CampaignSwitchProto_Campaign[]
}
/**
 * @generated from protobuf message CampaignSwitchProto.Campaign
 */
export interface CampaignSwitchProto_Campaign {
	/**
	 * @generated from protobuf field: string name = 1;
	 */
	name: string
	/**
	 * @generated from protobuf field: CampaignSwitchProto.InputDeck deck_1 = 2;
	 */
	deck1?: CampaignSwitchProto_InputDeck
	/**
	 * @generated from protobuf field: CampaignSwitchProto.InputDeck deck_2 = 3;
	 */
	deck2?: CampaignSwitchProto_InputDeck
	/**
	 * @generated from protobuf field: CampaignSwitchProto.InputDeck deck_3 = 4;
	 */
	deck3?: CampaignSwitchProto_InputDeck
	/**
	 * @generated from protobuf field: CampaignSwitchProto.InputDeck deck_4 = 5;
	 */
	deck4?: CampaignSwitchProto_InputDeck
}
/**
 * @generated from protobuf message CampaignSwitchProto.InputDeck
 */
export interface CampaignSwitchProto_InputDeck {
	/**
	 * @generated from protobuf field: string id = 1;
	 */
	id: string
	/**
	 * @generated from protobuf field: bool published = 2;
	 */
	published: boolean
}
// @generated message type with reflection information, may provide speed optimized methods
class CampaignSwitchProto$Type extends MessageType<CampaignSwitchProto> {
	constructor() {
		super('CampaignSwitchProto', [
			{
				no: 1,
				name: 'campaigns',
				kind: 'message',
				repeat: 1 /*RepeatType.PACKED*/,
				T: () => CampaignSwitchProto_Campaign,
			},
		])
	}
	create(value?: PartialMessage<CampaignSwitchProto>): CampaignSwitchProto {
		const message = { campaigns: [] }
		globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this })
		if (value !== undefined) reflectionMergePartial<CampaignSwitchProto>(this, message, value)
		return message
	}
	internalBinaryRead(
		reader: IBinaryReader,
		length: number,
		options: BinaryReadOptions,
		target?: CampaignSwitchProto,
	): CampaignSwitchProto {
		const message = target ?? this.create(),
			end = reader.pos + length
		while (reader.pos < end) {
			const [fieldNo, wireType] = reader.tag()
			switch (fieldNo) {
				case /* repeated CampaignSwitchProto.Campaign campaigns */ 1:
					message.campaigns.push(
						CampaignSwitchProto_Campaign.internalBinaryRead(reader, reader.uint32(), options),
					)
					break
				default:
					const u = options.readUnknownField
					if (u === 'throw')
						throw new globalThis.Error(
							`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`,
						)
					const d = reader.skip(wireType)
					if (u !== false)
						(u === true ? UnknownFieldHandler.onRead : u)(
							this.typeName,
							message,
							fieldNo,
							wireType,
							d,
						)
			}
		}
		return message
	}
	internalBinaryWrite(
		message: CampaignSwitchProto,
		writer: IBinaryWriter,
		options: BinaryWriteOptions,
	): IBinaryWriter {
		/* repeated CampaignSwitchProto.Campaign campaigns = 1; */
		for (let i = 0; i < message.campaigns.length; i++)
			CampaignSwitchProto_Campaign.internalBinaryWrite(
				message.campaigns[i],
				writer.tag(1, WireType.LengthDelimited).fork(),
				options,
			).join()
		const u = options.writeUnknownFields
		if (u !== false) (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer)
		return writer
	}
}
/**
 * @generated MessageType for protobuf message CampaignSwitchProto
 */
export const CampaignSwitchProto = new CampaignSwitchProto$Type()
// @generated message type with reflection information, may provide speed optimized methods
class CampaignSwitchProto_Campaign$Type extends MessageType<CampaignSwitchProto_Campaign> {
	constructor() {
		super('CampaignSwitchProto.Campaign', [
			{ no: 1, name: 'name', kind: 'scalar', T: 9 /*ScalarType.STRING*/ },
			{ no: 2, name: 'deck_1', kind: 'message', T: () => CampaignSwitchProto_InputDeck },
			{ no: 3, name: 'deck_2', kind: 'message', T: () => CampaignSwitchProto_InputDeck },
			{ no: 4, name: 'deck_3', kind: 'message', T: () => CampaignSwitchProto_InputDeck },
			{ no: 5, name: 'deck_4', kind: 'message', T: () => CampaignSwitchProto_InputDeck },
		])
	}
	create(value?: PartialMessage<CampaignSwitchProto_Campaign>): CampaignSwitchProto_Campaign {
		const message = { name: '' }
		globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this })
		if (value !== undefined)
			reflectionMergePartial<CampaignSwitchProto_Campaign>(this, message, value)
		return message
	}
	internalBinaryRead(
		reader: IBinaryReader,
		length: number,
		options: BinaryReadOptions,
		target?: CampaignSwitchProto_Campaign,
	): CampaignSwitchProto_Campaign {
		const message = target ?? this.create(),
			end = reader.pos + length
		while (reader.pos < end) {
			const [fieldNo, wireType] = reader.tag()
			switch (fieldNo) {
				case /* string name */ 1:
					message.name = reader.string()
					break
				case /* CampaignSwitchProto.InputDeck deck_1 */ 2:
					message.deck1 = CampaignSwitchProto_InputDeck.internalBinaryRead(
						reader,
						reader.uint32(),
						options,
						message.deck1,
					)
					break
				case /* CampaignSwitchProto.InputDeck deck_2 */ 3:
					message.deck2 = CampaignSwitchProto_InputDeck.internalBinaryRead(
						reader,
						reader.uint32(),
						options,
						message.deck2,
					)
					break
				case /* CampaignSwitchProto.InputDeck deck_3 */ 4:
					message.deck3 = CampaignSwitchProto_InputDeck.internalBinaryRead(
						reader,
						reader.uint32(),
						options,
						message.deck3,
					)
					break
				case /* CampaignSwitchProto.InputDeck deck_4 */ 5:
					message.deck4 = CampaignSwitchProto_InputDeck.internalBinaryRead(
						reader,
						reader.uint32(),
						options,
						message.deck4,
					)
					break
				default:
					const u = options.readUnknownField
					if (u === 'throw')
						throw new globalThis.Error(
							`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`,
						)
					const d = reader.skip(wireType)
					if (u !== false)
						(u === true ? UnknownFieldHandler.onRead : u)(
							this.typeName,
							message,
							fieldNo,
							wireType,
							d,
						)
			}
		}
		return message
	}
	internalBinaryWrite(
		message: CampaignSwitchProto_Campaign,
		writer: IBinaryWriter,
		options: BinaryWriteOptions,
	): IBinaryWriter {
		/* string name = 1; */
		if (message.name !== '') writer.tag(1, WireType.LengthDelimited).string(message.name)
		/* CampaignSwitchProto.InputDeck deck_1 = 2; */
		if (message.deck1)
			CampaignSwitchProto_InputDeck.internalBinaryWrite(
				message.deck1,
				writer.tag(2, WireType.LengthDelimited).fork(),
				options,
			).join()
		/* CampaignSwitchProto.InputDeck deck_2 = 3; */
		if (message.deck2)
			CampaignSwitchProto_InputDeck.internalBinaryWrite(
				message.deck2,
				writer.tag(3, WireType.LengthDelimited).fork(),
				options,
			).join()
		/* CampaignSwitchProto.InputDeck deck_3 = 4; */
		if (message.deck3)
			CampaignSwitchProto_InputDeck.internalBinaryWrite(
				message.deck3,
				writer.tag(4, WireType.LengthDelimited).fork(),
				options,
			).join()
		/* CampaignSwitchProto.InputDeck deck_4 = 5; */
		if (message.deck4)
			CampaignSwitchProto_InputDeck.internalBinaryWrite(
				message.deck4,
				writer.tag(5, WireType.LengthDelimited).fork(),
				options,
			).join()
		const u = options.writeUnknownFields
		if (u !== false) (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer)
		return writer
	}
}
/**
 * @generated MessageType for protobuf message CampaignSwitchProto.Campaign
 */
export const CampaignSwitchProto_Campaign = new CampaignSwitchProto_Campaign$Type()
// @generated message type with reflection information, may provide speed optimized methods
class CampaignSwitchProto_InputDeck$Type extends MessageType<CampaignSwitchProto_InputDeck> {
	constructor() {
		super('CampaignSwitchProto.InputDeck', [
			{ no: 1, name: 'id', kind: 'scalar', T: 9 /*ScalarType.STRING*/ },
			{ no: 2, name: 'published', kind: 'scalar', T: 8 /*ScalarType.BOOL*/ },
		])
	}
	create(value?: PartialMessage<CampaignSwitchProto_InputDeck>): CampaignSwitchProto_InputDeck {
		const message = { id: '', published: false }
		globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this })
		if (value !== undefined)
			reflectionMergePartial<CampaignSwitchProto_InputDeck>(this, message, value)
		return message
	}
	internalBinaryRead(
		reader: IBinaryReader,
		length: number,
		options: BinaryReadOptions,
		target?: CampaignSwitchProto_InputDeck,
	): CampaignSwitchProto_InputDeck {
		const message = target ?? this.create(),
			end = reader.pos + length
		while (reader.pos < end) {
			const [fieldNo, wireType] = reader.tag()
			switch (fieldNo) {
				case /* string id */ 1:
					message.id = reader.string()
					break
				case /* bool published */ 2:
					message.published = reader.bool()
					break
				default:
					const u = options.readUnknownField
					if (u === 'throw')
						throw new globalThis.Error(
							`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`,
						)
					const d = reader.skip(wireType)
					if (u !== false)
						(u === true ? UnknownFieldHandler.onRead : u)(
							this.typeName,
							message,
							fieldNo,
							wireType,
							d,
						)
			}
		}
		return message
	}
	internalBinaryWrite(
		message: CampaignSwitchProto_InputDeck,
		writer: IBinaryWriter,
		options: BinaryWriteOptions,
	): IBinaryWriter {
		/* string id = 1; */
		if (message.id !== '') writer.tag(1, WireType.LengthDelimited).string(message.id)
		/* bool published = 2; */
		if (message.published !== false) writer.tag(2, WireType.Varint).bool(message.published)
		const u = options.writeUnknownFields
		if (u !== false) (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer)
		return writer
	}
}
/**
 * @generated MessageType for protobuf message CampaignSwitchProto.InputDeck
 */
export const CampaignSwitchProto_InputDeck = new CampaignSwitchProto_InputDeck$Type()
