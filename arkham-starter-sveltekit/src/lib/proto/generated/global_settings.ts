// @generated by protobuf-ts 2.9.3
// @generated from protobuf file "global_settings.proto" (syntax proto3)
// tslint:disable
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
/**
 * @generated from protobuf message GlobalSettings
 */
export interface GlobalSettings {
    /**
     * @generated from protobuf field: bool taboo = 1;
     */
    taboo: boolean;
    /**
     * @generated from protobuf field: GlobalSettings.PipStyle pip_style = 2;
     */
    pipStyle: GlobalSettings_PipStyle;
}
/**
 * @generated from protobuf enum GlobalSettings.PipStyle
 */
export enum GlobalSettings_PipStyle {
    /**
     * @generated from protobuf enum value: Unknown = 0;
     */
    Unknown = 0,
    /**
     * @generated from protobuf enum value: None = 1;
     */
    None = 1,
    /**
     * @generated from protobuf enum value: Number = 2;
     */
    Number = 2,
    /**
     * @generated from protobuf enum value: Pips = 3;
     */
    Pips = 3,
    /**
     * @generated from protobuf enum value: PipsReal = 4;
     */
    PipsReal = 4
}
// @generated message type with reflection information, may provide speed optimized methods
class GlobalSettings$Type extends MessageType<GlobalSettings> {
    constructor() {
        super("GlobalSettings", [
            { no: 1, name: "taboo", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 2, name: "pip_style", kind: "enum", T: () => ["GlobalSettings.PipStyle", GlobalSettings_PipStyle] }
        ]);
    }
    create(value?: PartialMessage<GlobalSettings>): GlobalSettings {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.taboo = false;
        message.pipStyle = 0;
        if (value !== undefined)
            reflectionMergePartial<GlobalSettings>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GlobalSettings): GlobalSettings {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* bool taboo */ 1:
                    message.taboo = reader.bool();
                    break;
                case /* GlobalSettings.PipStyle pip_style */ 2:
                    message.pipStyle = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: GlobalSettings, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* bool taboo = 1; */
        if (message.taboo !== false)
            writer.tag(1, WireType.Varint).bool(message.taboo);
        /* GlobalSettings.PipStyle pip_style = 2; */
        if (message.pipStyle !== 0)
            writer.tag(2, WireType.Varint).int32(message.pipStyle);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message GlobalSettings
 */
export const GlobalSettings = new GlobalSettings$Type();
