// @generated by protobuf-ts 2.8.1
// @generated from protobuf file "export_options.proto" (syntax proto3)
// tslint:disable
import type { BinaryWriteOptions } from '@protobuf-ts/runtime'
import type { IBinaryWriter } from '@protobuf-ts/runtime'
import type { BinaryReadOptions } from '@protobuf-ts/runtime'
import type { IBinaryReader } from '@protobuf-ts/runtime'
import type { PartialMessage } from '@protobuf-ts/runtime'
import { WireType } from '@protobuf-ts/runtime'
import { UnknownFieldHandler } from '@protobuf-ts/runtime'
import { reflectionMergePartial } from '@protobuf-ts/runtime'
import { MESSAGE_TYPE } from '@protobuf-ts/runtime'
import { MessageType } from '@protobuf-ts/runtime'

import { CardInfo } from './card_info'
import { CardOptions } from './card_options'
import { GlobalSettings } from './global_settings'
/**
 * @generated from protobuf message ExportOptions
 */
export interface ExportOptions {
	/**
	 * @generated from protobuf field: GlobalSettings global_settings = 1;
	 */
	globalSettings?: GlobalSettings
	/**
	 * @generated from protobuf field: CardInfo card_info = 2;
	 */
	cardInfo?: CardInfo
	/**
	 * @generated from protobuf field: CardOptions card_options = 3;
	 */
	cardOptions?: CardOptions
}
// @generated message type with reflection information, may provide speed optimized methods
class ExportOptions$Type extends MessageType<ExportOptions> {
	constructor() {
		super('ExportOptions', [
			{ no: 1, name: 'global_settings', kind: 'message', T: () => GlobalSettings },
			{ no: 2, name: 'card_info', kind: 'message', T: () => CardInfo },
			{ no: 3, name: 'card_options', kind: 'message', T: () => CardOptions },
		])
	}
	create(value?: PartialMessage<ExportOptions>): ExportOptions {
		const message = {}
		globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this })
		if (value !== undefined) reflectionMergePartial<ExportOptions>(this, message, value)
		return message
	}
	internalBinaryRead(
		reader: IBinaryReader,
		length: number,
		options: BinaryReadOptions,
		target?: ExportOptions,
	): ExportOptions {
		const message = target ?? this.create(),
			end = reader.pos + length
		while (reader.pos < end) {
			const [fieldNo, wireType] = reader.tag()
			switch (fieldNo) {
				case /* GlobalSettings global_settings */ 1:
					message.globalSettings = GlobalSettings.internalBinaryRead(
						reader,
						reader.uint32(),
						options,
						message.globalSettings,
					)
					break
				case /* CardInfo card_info */ 2:
					message.cardInfo = CardInfo.internalBinaryRead(
						reader,
						reader.uint32(),
						options,
						message.cardInfo,
					)
					break
				case /* CardOptions card_options */ 3:
					message.cardOptions = CardOptions.internalBinaryRead(
						reader,
						reader.uint32(),
						options,
						message.cardOptions,
					)
					break
				default:
					const u = options.readUnknownField
					if (u === 'throw')
						throw new globalThis.Error(
							`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`,
						)
					const d = reader.skip(wireType)
					if (u !== false)
						(u === true ? UnknownFieldHandler.onRead : u)(
							this.typeName,
							message,
							fieldNo,
							wireType,
							d,
						)
			}
		}
		return message
	}
	internalBinaryWrite(
		message: ExportOptions,
		writer: IBinaryWriter,
		options: BinaryWriteOptions,
	): IBinaryWriter {
		/* GlobalSettings global_settings = 1; */
		if (message.globalSettings)
			GlobalSettings.internalBinaryWrite(
				message.globalSettings,
				writer.tag(1, WireType.LengthDelimited).fork(),
				options,
			).join()
		/* CardInfo card_info = 2; */
		if (message.cardInfo)
			CardInfo.internalBinaryWrite(
				message.cardInfo,
				writer.tag(2, WireType.LengthDelimited).fork(),
				options,
			).join()
		/* CardOptions card_options = 3; */
		if (message.cardOptions)
			CardOptions.internalBinaryWrite(
				message.cardOptions,
				writer.tag(3, WireType.LengthDelimited).fork(),
				options,
			).join()
		const u = options.writeUnknownFields
		if (u !== false) (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer)
		return writer
	}
}
/**
 * @generated MessageType for protobuf message ExportOptions
 */
export const ExportOptions = new ExportOptions$Type()
