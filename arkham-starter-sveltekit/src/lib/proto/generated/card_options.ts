// @generated by protobuf-ts 2.8.1
// @generated from protobuf file "card_options.proto" (syntax proto3)
// tslint:disable
import type { BinaryWriteOptions } from '@protobuf-ts/runtime'
import type { IBinaryWriter } from '@protobuf-ts/runtime'
import type { BinaryReadOptions } from '@protobuf-ts/runtime'
import type { IBinaryReader } from '@protobuf-ts/runtime'
import type { PartialMessage } from '@protobuf-ts/runtime'
import { WireType } from '@protobuf-ts/runtime'
import { UnknownFieldHandler } from '@protobuf-ts/runtime'
import { reflectionMergePartial } from '@protobuf-ts/runtime'
import { MESSAGE_TYPE } from '@protobuf-ts/runtime'
import { MessageType } from '@protobuf-ts/runtime'
/**
 * @generated from protobuf message CardOptions
 */
export interface CardOptions {
	/**
	 * @generated from protobuf field: bool class_icons = 1;
	 */
	classIcons: boolean
	/**
	 * @generated from protobuf field: bool color = 2;
	 */
	color: boolean
	/**
	 * @generated from protobuf field: bool bold = 3;
	 */
	bold: boolean
	/**
	 * @generated from protobuf field: bool link = 4;
	 */
	link: boolean
	/**
	 * @generated from protobuf field: bool taboo_icon = 5;
	 */
	tabooIcon: boolean
	/**
	 * @generated from protobuf field: bool exceptional_icon = 6;
	 */
	exceptionalIcon: boolean
}
// @generated message type with reflection information, may provide speed optimized methods
class CardOptions$Type extends MessageType<CardOptions> {
	constructor() {
		super('CardOptions', [
			{ no: 1, name: 'class_icons', kind: 'scalar', T: 8 /*ScalarType.BOOL*/ },
			{ no: 2, name: 'color', kind: 'scalar', T: 8 /*ScalarType.BOOL*/ },
			{ no: 3, name: 'bold', kind: 'scalar', T: 8 /*ScalarType.BOOL*/ },
			{ no: 4, name: 'link', kind: 'scalar', T: 8 /*ScalarType.BOOL*/ },
			{ no: 5, name: 'taboo_icon', kind: 'scalar', T: 8 /*ScalarType.BOOL*/ },
			{ no: 6, name: 'exceptional_icon', kind: 'scalar', T: 8 /*ScalarType.BOOL*/ },
		])
	}
	create(value?: PartialMessage<CardOptions>): CardOptions {
		const message = {
			classIcons: false,
			color: false,
			bold: false,
			link: false,
			tabooIcon: false,
			exceptionalIcon: false,
		}
		globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this })
		if (value !== undefined) reflectionMergePartial<CardOptions>(this, message, value)
		return message
	}
	internalBinaryRead(
		reader: IBinaryReader,
		length: number,
		options: BinaryReadOptions,
		target?: CardOptions,
	): CardOptions {
		const message = target ?? this.create(),
			end = reader.pos + length
		while (reader.pos < end) {
			const [fieldNo, wireType] = reader.tag()
			switch (fieldNo) {
				case /* bool class_icons */ 1:
					message.classIcons = reader.bool()
					break
				case /* bool color */ 2:
					message.color = reader.bool()
					break
				case /* bool bold */ 3:
					message.bold = reader.bool()
					break
				case /* bool link */ 4:
					message.link = reader.bool()
					break
				case /* bool taboo_icon */ 5:
					message.tabooIcon = reader.bool()
					break
				case /* bool exceptional_icon */ 6:
					message.exceptionalIcon = reader.bool()
					break
				default:
					const u = options.readUnknownField
					if (u === 'throw')
						throw new globalThis.Error(
							`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`,
						)
					const d = reader.skip(wireType)
					if (u !== false)
						(u === true ? UnknownFieldHandler.onRead : u)(
							this.typeName,
							message,
							fieldNo,
							wireType,
							d,
						)
			}
		}
		return message
	}
	internalBinaryWrite(
		message: CardOptions,
		writer: IBinaryWriter,
		options: BinaryWriteOptions,
	): IBinaryWriter {
		/* bool class_icons = 1; */
		if (message.classIcons !== false) writer.tag(1, WireType.Varint).bool(message.classIcons)
		/* bool color = 2; */
		if (message.color !== false) writer.tag(2, WireType.Varint).bool(message.color)
		/* bool bold = 3; */
		if (message.bold !== false) writer.tag(3, WireType.Varint).bool(message.bold)
		/* bool link = 4; */
		if (message.link !== false) writer.tag(4, WireType.Varint).bool(message.link)
		/* bool taboo_icon = 5; */
		if (message.tabooIcon !== false) writer.tag(5, WireType.Varint).bool(message.tabooIcon)
		/* bool exceptional_icon = 6; */
		if (message.exceptionalIcon !== false)
			writer.tag(6, WireType.Varint).bool(message.exceptionalIcon)
		const u = options.writeUnknownFields
		if (u !== false) (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer)
		return writer
	}
}
/**
 * @generated MessageType for protobuf message CardOptions
 */
export const CardOptions = new CardOptions$Type()
