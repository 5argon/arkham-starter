// @generated by protobuf-ts 2.8.1
// @generated from protobuf file "campaign_switching.proto" (syntax proto3)
// tslint:disable
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MESSAGE_TYPE } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
/**
 * @generated from protobuf message CampaignSwitchingProto
 */
export interface CampaignSwitchingProto {
    /**
     * @generated from protobuf field: repeated CampaignSwitchingProto.Campaign campaigns = 1;
     */
    campaigns: CampaignSwitchingProto_Campaign[];
}
/**
 * @generated from protobuf message CampaignSwitchingProto.Campaign
 */
export interface CampaignSwitchingProto_Campaign {
    /**
     * @generated from protobuf field: string name = 1;
     */
    name: string;
    /**
     * @generated from protobuf field: CampaignSwitchingProto.InputDeck deck_1 = 2;
     */
    deck1?: CampaignSwitchingProto_InputDeck;
    /**
     * @generated from protobuf field: CampaignSwitchingProto.InputDeck deck_2 = 3;
     */
    deck2?: CampaignSwitchingProto_InputDeck;
    /**
     * @generated from protobuf field: CampaignSwitchingProto.InputDeck deck_3 = 4;
     */
    deck3?: CampaignSwitchingProto_InputDeck;
    /**
     * @generated from protobuf field: CampaignSwitchingProto.InputDeck deck_4 = 5;
     */
    deck4?: CampaignSwitchingProto_InputDeck;
}
/**
 * @generated from protobuf message CampaignSwitchingProto.InputDeck
 */
export interface CampaignSwitchingProto_InputDeck {
    /**
     * @generated from protobuf field: string id = 1;
     */
    id: string;
    /**
     * @generated from protobuf field: bool published = 2;
     */
    published: boolean;
}
// @generated message type with reflection information, may provide speed optimized methods
class CampaignSwitchingProto$Type extends MessageType<CampaignSwitchingProto> {
    constructor() {
        super("CampaignSwitchingProto", [
            { no: 1, name: "campaigns", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => CampaignSwitchingProto_Campaign }
        ]);
    }
    create(value?: PartialMessage<CampaignSwitchingProto>): CampaignSwitchingProto {
        const message = { campaigns: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<CampaignSwitchingProto>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: CampaignSwitchingProto): CampaignSwitchingProto {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated CampaignSwitchingProto.Campaign campaigns */ 1:
                    message.campaigns.push(CampaignSwitchingProto_Campaign.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: CampaignSwitchingProto, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated CampaignSwitchingProto.Campaign campaigns = 1; */
        for (let i = 0; i < message.campaigns.length; i++)
            CampaignSwitchingProto_Campaign.internalBinaryWrite(message.campaigns[i], writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message CampaignSwitchingProto
 */
export const CampaignSwitchingProto = new CampaignSwitchingProto$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CampaignSwitchingProto_Campaign$Type extends MessageType<CampaignSwitchingProto_Campaign> {
    constructor() {
        super("CampaignSwitchingProto.Campaign", [
            { no: 1, name: "name", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "deck_1", kind: "message", T: () => CampaignSwitchingProto_InputDeck },
            { no: 3, name: "deck_2", kind: "message", T: () => CampaignSwitchingProto_InputDeck },
            { no: 4, name: "deck_3", kind: "message", T: () => CampaignSwitchingProto_InputDeck },
            { no: 5, name: "deck_4", kind: "message", T: () => CampaignSwitchingProto_InputDeck }
        ]);
    }
    create(value?: PartialMessage<CampaignSwitchingProto_Campaign>): CampaignSwitchingProto_Campaign {
        const message = { name: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<CampaignSwitchingProto_Campaign>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: CampaignSwitchingProto_Campaign): CampaignSwitchingProto_Campaign {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string name */ 1:
                    message.name = reader.string();
                    break;
                case /* CampaignSwitchingProto.InputDeck deck_1 */ 2:
                    message.deck1 = CampaignSwitchingProto_InputDeck.internalBinaryRead(reader, reader.uint32(), options, message.deck1);
                    break;
                case /* CampaignSwitchingProto.InputDeck deck_2 */ 3:
                    message.deck2 = CampaignSwitchingProto_InputDeck.internalBinaryRead(reader, reader.uint32(), options, message.deck2);
                    break;
                case /* CampaignSwitchingProto.InputDeck deck_3 */ 4:
                    message.deck3 = CampaignSwitchingProto_InputDeck.internalBinaryRead(reader, reader.uint32(), options, message.deck3);
                    break;
                case /* CampaignSwitchingProto.InputDeck deck_4 */ 5:
                    message.deck4 = CampaignSwitchingProto_InputDeck.internalBinaryRead(reader, reader.uint32(), options, message.deck4);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: CampaignSwitchingProto_Campaign, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string name = 1; */
        if (message.name !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.name);
        /* CampaignSwitchingProto.InputDeck deck_1 = 2; */
        if (message.deck1)
            CampaignSwitchingProto_InputDeck.internalBinaryWrite(message.deck1, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        /* CampaignSwitchingProto.InputDeck deck_2 = 3; */
        if (message.deck2)
            CampaignSwitchingProto_InputDeck.internalBinaryWrite(message.deck2, writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        /* CampaignSwitchingProto.InputDeck deck_3 = 4; */
        if (message.deck3)
            CampaignSwitchingProto_InputDeck.internalBinaryWrite(message.deck3, writer.tag(4, WireType.LengthDelimited).fork(), options).join();
        /* CampaignSwitchingProto.InputDeck deck_4 = 5; */
        if (message.deck4)
            CampaignSwitchingProto_InputDeck.internalBinaryWrite(message.deck4, writer.tag(5, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message CampaignSwitchingProto.Campaign
 */
export const CampaignSwitchingProto_Campaign = new CampaignSwitchingProto_Campaign$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CampaignSwitchingProto_InputDeck$Type extends MessageType<CampaignSwitchingProto_InputDeck> {
    constructor() {
        super("CampaignSwitchingProto.InputDeck", [
            { no: 1, name: "id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "published", kind: "scalar", T: 8 /*ScalarType.BOOL*/ }
        ]);
    }
    create(value?: PartialMessage<CampaignSwitchingProto_InputDeck>): CampaignSwitchingProto_InputDeck {
        const message = { id: "", published: false };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<CampaignSwitchingProto_InputDeck>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: CampaignSwitchingProto_InputDeck): CampaignSwitchingProto_InputDeck {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string id */ 1:
                    message.id = reader.string();
                    break;
                case /* bool published */ 2:
                    message.published = reader.bool();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: CampaignSwitchingProto_InputDeck, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string id = 1; */
        if (message.id !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.id);
        /* bool published = 2; */
        if (message.published !== false)
            writer.tag(2, WireType.Varint).bool(message.published);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message CampaignSwitchingProto.InputDeck
 */
export const CampaignSwitchingProto_InputDeck = new CampaignSwitchingProto_InputDeck$Type();
